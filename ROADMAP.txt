- wire the babel generation with `lilith`
- transpile config files given master `edn` metadata annotations => `babel interpret`; with option for spefic targets => `babel interpret --target micro`
- or hit all targets at once as default, including `toml` & `yaml` (micro, helix, broot, lazygit, etc)

- render a color coded keyboard for empty & used bindings right from the table => `babel display --layout`
- query keyboard shortcut for given action on app => `babel display --action `open file` --program helix
- or query for shortcut output => `babel display --trigger `ctl-cmd-h` or `babel display --trigger Tf`
- prettier table framework?
- for chars seq there will be a field in the metadata called `binding`, if present, use instead of command seq
- add flag for sorting bindings

==================================================
cmd/cmdDisplay.go
  line 66     TODO   add debug flag, or use verbose, telling which file & line we are currently reading
  line 67     TODO   update error handlers
  line 214    TODO   hardcode these values at root
cmd/utilParse.go
  line 18     TODO   reuse parse functions to render keyboard
  line 39     TODO   add lefts
  line 59     TODO   high level: parse edn => read file line by line to extract values. mount on structs to indicate config & color
  line 60     TODO   high level: generate markdown => extract values mounted on structs
==================================================
